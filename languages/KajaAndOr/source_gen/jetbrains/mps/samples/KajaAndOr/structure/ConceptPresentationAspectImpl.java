package jetbrains.mps.samples.KajaAndOr.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_And;
  private ConceptPresentation props_LogicalOperator;
  private ConceptPresentation props_Or;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.And:
        if (props_And == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("and");
          props_And = cpb.create();
        }
        return props_And;
      case LanguageConceptSwitch.LogicalOperator:
        if (props_LogicalOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LogicalOperator = cpb.create();
        }
        return props_LogicalOperator;
      case LanguageConceptSwitch.Or:
        if (props_Or == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("or");
          props_Or = cpb.create();
        }
        return props_Or;
    }
    return null;
  }
}
